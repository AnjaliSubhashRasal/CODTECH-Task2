import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import numpy as np

# Load the dataset
file_path = r'C:\Users\Anjali Rasal\Desktop\Intern\CodTech\Dataset.csv'
data = pd.read_csv(file_path)

# Clean and preprocess data
data.rename(columns={"Survived": "Survived"}, inplace=True
data_cleaned = data[["Age", "Fare"]].dropna()

# Features and target
X = data_cleaned[["Age"]].values  # Independent variable
y = data_cleaned["Fare"].values  # Dependent variable

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Model Evaluation Metrics:")
print(f"Mean Squared Error: {mse:.2f}")
print(f"R-squared: {r2:.2f}")


# Visualization: Regression line
plt.figure(figsize=(10, 5))
plt.scatter(X_test, y_test, color="blue", label="Actual")
plt.plot(X_test, y_pred, color="red", linewidth=2, label="Predicted")
plt.title("Regression Line")
plt.xlabel("Age")
plt.ylabel("Fare")
plt.legend()
plt.show()

# Visualization: Actual vs Predicted
plt.figure(figsize=(10, 5))
plt.scatter(y_test, y_pred, color="green")
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color="red", linewidth=2)
plt.title("Actual vs Predicted")
plt.xlabel("Actual Values")
plt.ylabel("Predicted Values")
plt.show()
